# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Frame, Tk, Canvas, Entry, Text, Button, PhotoImage, StringVar

class login_frame(Frame):
    
    def __init__(self, window, root):
        Frame.__init__(self, window)

        self.MainWindow = root
        self.frame_name = "Login"

        OUTPUT_PATH = Path(__file__).parent
        ASSETS_PATH = OUTPUT_PATH / Path("./assets")

        def relative_to_assets(path: str) -> Path:
            return ASSETS_PATH / Path(path)

        canvas = Canvas(
            self,
            bg = "#A54848",
            height = 590,
            width = 1267,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        canvas.create_rectangle(
            0.0,
            0.0,
            1267.0,
            590.0,
            fill="#000000",
            outline="")

        canvas.create_rectangle(
            228.0,
            107.0,
            1039.0,
            294.0,
            fill="#FFFFFF",
            outline="")

        canvas.create_rectangle(
            233.0,
            112.0,
            1034.0,
            289.0,
            fill="#000000",
            outline="")

        canvas.create_rectangle(
            515.0,
            198.0,
            776.0,
            288.0,
            fill="#FFFFFF",
            outline="")

        canvas.create_rectangle(
            776.0,
            197.0,
            1033.0,
            287.0,
            fill="#FFFFFF",
            outline="")

        canvas.create_rectangle(
            776.0,
            113.0,
            1033.0,
            203.0,
            fill="#FFFFFF",
            outline="")

        canvas.create_rectangle(
            515.0,
            113.0,
            776.0,
            203.0,
            fill="#FFFFFF",
            outline="")

        canvas.create_rectangle(
            520.0,
            203.0,
            771.0,
            283.0,
            fill="#000000",
            outline="")

        canvas.create_rectangle(
            520.0,
            118.0,
            771.0,
            198.0,
            fill="#000000",
            outline="")

        canvas.create_rectangle(
            776.0,
            203.0,
            1027.0,
            283.0,
            fill="#000000",
            outline="")

        self.entry_image_1 = PhotoImage(
            file=relative_to_assets("entry_1.png"))
        entry_bg_1 = canvas.create_image(
            901.5,
            158.0,
            image=self.entry_image_1
        )

        self.entry_text = StringVar(self)
        entry_1 = Entry(
            self,
            bd=0,
            bg="#000000",
            highlightthickness=0,
            font="-family {Roboto} -size -30 -weight normal -underline 0 -overstrike 0",
            fg="#FFFFFF",
            textvariable=self.entry_text
            # show="*"
        )
        entry_1.place(
            x=790.0,
            y=118.0,
            width=210.0,
            height=80.0
        )

        canvas.create_text(
            281.0,
            166.0,
            anchor="nw",
            text="User ID",
            fill="#FFFFFF",
            font=("Roboto", 30 * -1)
        )

        canvas.create_text(
            537.0,
            139.0,
            anchor="nw",
            text="Entry",
            fill="#FFFFFF",
            font=("Roboto", 30 * -1)
        )

        canvas.create_text(
            537.0,
            222.0,
            anchor="nw",
            text="Valid",
            fill="#FFFFFF",
            font=("Roboto", 30 * -1)
        )

        self.valid_text = StringVar(self, "")
        self.valid_text_id=canvas.create_text(
            790.0,
            219.0,
            anchor="nw",
            text=self.valid_text.get(),
            fill="#FFFFFF",
            font=("Roboto", 30 * -1)
        )

        button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        button_1 = Button(
            self,
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=self.loginCheck,
            relief="flat"
        )
        button_1.image = button_image_1
        button_1.place(
            x=537.0,
            y=387.0,
            width=162.0,
            height=95.0
        )

        self.canvas = canvas
        self.entry_text.trace_add("write", self.loginEntryCheck)

        # Disable all the Radiobuttons except the login one
        for (button,buttonIndex) in self.MainWindow.buttonArray.items():
            if buttonIndex != 1:
                button.config(state='disabled')

    def loginCheck(self):
        entry = self.entry_text.get()

        if entry == "69":
            exit(0)

        elif entry == "123":
            for (button,buttonIndex) in self.MainWindow.buttonArray.items():
                if buttonIndex != 1:
                    button.config(text="Text Button "+str(buttonIndex),state='normal')
            self.MainWindow.button02.invoke()

        elif entry == "96":
            for (button,buttonIndex) in self.MainWindow.buttonArray.items():
                if buttonIndex != 1:
                    button.config(text="",state='disabled')

        else:
            self.valid_text.set("Invalid")
            self.canvas.itemconfig(self.valid_text_id, text=self.valid_text.get())

    def loginEntryCheck(self, *args):
        entry = self.entry_text.get()

        if entry == '69':
            self.valid_text.set("Exit")
            self.canvas.itemconfig(self.valid_text_id, text=self.valid_text.get())

        elif entry == '123':
            self.valid_text.set("Driver")
            self.canvas.itemconfig(self.valid_text_id, text=self.valid_text.get())

        elif entry == '96':
            self.valid_text.set("Lock")
            self.canvas.itemconfig(self.valid_text_id, text=self.valid_text.get())
            
        else:
            self.valid_text.set("")
            self.canvas.itemconfig(self.valid_text_id, text=self.valid_text.get())
        
        return True
